<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS3</title>
      <link href="2021/05/04/CSS3/"/>
      <url>2021/05/04/CSS3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="2021/04/27/HTML5/"/>
      <url>2021/04/27/HTML5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ul><li><p>新的语义元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;标签定义文档的页眉</span><br><span class="line">&lt;footer&gt;标签定义文档或节的页脚</span><br><span class="line">以上支持：谷歌5.0IE9.0火狐4.0苹果5.0欧朋11.1</span><br><span class="line"></span><br><span class="line">&lt;article&gt;标签规定独立的自包含内容&lt;&#x2F;article&gt;</span><br><span class="line">支持：谷歌6.0IE9.0火狐4.0苹果5.0欧朋11.1</span><br><span class="line"></span><br><span class="line">&lt;section&gt;标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</span><br><span class="line">支持：谷歌5.0IE9.0火狐4.0苹果5.0欧朋11.5</span><br></pre></td></tr></table></figure></li><li><p>新的表单控件，比如数字、日期、时间、日历和滑块</p></li><li><p>强大的图像支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas&gt;标签定义图形，比如图表和其他图像。标签只是图形容器，您必须使用脚本来绘制图形。</span><br><span class="line">支持：谷歌4.0IE9.0火狐2.0苹果3.1欧朋9.0</span><br><span class="line"></span><br><span class="line">&lt;svg&gt;标记定义 SVG 图形的容器。</span><br><span class="line"> SVG 有几种绘制路径、框、圆、文本和图形图像的方法。</span><br><span class="line">支持：谷歌4.0IE9.0火狐3.0苹果3.2欧朋10.1</span><br></pre></td></tr></table></figure></li><li><p>强大的多媒体支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;video&gt;标签定义视频，比如电影片段或其他视频流。</span><br><span class="line">支持：谷歌4.0IE9.0火狐3.5苹果3.1欧朋11.5</span><br><span class="line">&lt;audio&gt;标签定义声音，比如音乐或其他音频流。</span><br><span class="line">支持：谷歌4.0IE9.0火狐3.5苹果4.0欧朋11.5</span><br></pre></td></tr></table></figure></li><li><p>强大的新API，比如用本地储存取代cookie</p></li></ul><h2 id="被删元素"><a href="#被删元素" class="headerlink" title="被删元素"></a>被删元素</h2><p>以下HTML4.01元素已从HTML5中删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;acronym&gt;标签定义首字母缩写。</span><br><span class="line">&lt;applet&gt;标签定义嵌入的 applet。</span><br><span class="line">&lt;basefont&gt;标签定义基准字体。该标签可以为文档中的所有文本定义默认字体颜色、字体大小和字体系列。</span><br><span class="line">&lt;big&gt;标签呈现大号字体效果。</span><br><span class="line">&lt;center&gt;对其所包括的文本进行水平居中。</span><br><span class="line">&lt;dir&gt;标签定义目录列表。</span><br><span class="line">&lt;font&gt;规定文本的字体、字体尺寸、字体颜色。</span><br><span class="line">&lt;frame&gt;标签定义 frameset 中的一个特定的窗口（框架）。</span><br><span class="line">&lt;frameset&gt;可定义一个框架集。</span><br><span class="line">&lt;noframes&gt;可为那些不支持框架的浏览器显示文本。noframes 元素位于 frameset 元素内部。</span><br><span class="line">&lt;strike&gt;标签可定义加删除线文本定义。</span><br><span class="line">&lt;tt&gt;标签呈现类似打字机或者等宽的文本效果。</span><br></pre></td></tr></table></figure><h2 id="HTML5元素定义为块级元素"><a href="#HTML5元素定义为块级元素" class="headerlink" title="HTML5元素定义为块级元素"></a>HTML5元素定义为块级元素</h2><p>HTML5定义了八个新的语义HTML元素，所有的都是块级元素。<br>在老式浏览器中为了确保有正确的行为，可以把CSS display属性设置为block。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header,section,footer,saide,nav,main,article,figure&#123;</span><br><span class="line">  display:block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新的语义-结构元素"><a href="#新的语义-结构元素" class="headerlink" title="新的语义/结构元素"></a>新的语义/结构元素</h2><table><thead><tr><th align="left"><strong>标签</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">article</td><td align="left">定义文档内的文章。</td></tr><tr><td align="left">aside</td><td align="left">定义页面内容之外的内容。</td></tr><tr><td align="left">bdi</td><td align="left">定义与其他文本不同的文本方向。</td></tr><tr><td align="left">details</td><td align="left">定义用户可查看或隐藏的额外细节。</td></tr><tr><td align="left">dialog</td><td align="left">定义对话框或窗口。</td></tr><tr><td align="left">figcaption</td><td align="left">定义 figure 元素的标题。</td></tr><tr><td align="left">figure</td><td align="left">定义自包含内容，比如图示、图表、照片、代码清单等等。</td></tr><tr><td align="left">footer</td><td align="left">定义文档或节的页脚。</td></tr><tr><td align="left">header</td><td align="left">定义文档或节的页眉。</td></tr><tr><td align="left">main</td><td align="left">定义文档的主内容。</td></tr><tr><td align="left">mark</td><td align="left">定义重要或强调的内容。</td></tr><tr><td align="left">menuitem</td><td align="left">定义用户能够从弹出菜单调用的命令/菜单项目。</td></tr><tr><td align="left">meter</td><td align="left">定义已知范围（尺度）内的标量测量。</td></tr><tr><td align="left">nav</td><td align="left">定义文档内的导航链接。</td></tr><tr><td align="left">progress</td><td align="left">定义任务进度。</td></tr><tr><td align="left">rp</td><td align="left">定义在不支持 ruby 注释的浏览器中显示什么。</td></tr><tr><td align="left">rt</td><td align="left">定义关于字符的解释/发音（用于东亚字体）。</td></tr><tr><td align="left">ruby</td><td align="left">定义 ruby 注释（用于东亚字体）。</td></tr><tr><td align="left">section</td><td align="left">定义文档中的节。</td></tr><tr><td align="left">summary</td><td align="left">定义 details 元素的可见标题。</td></tr><tr><td align="left">time</td><td align="left">定义日期/时间。</td></tr><tr><td align="left">wbr</td><td align="left">定义可能的折行（line-break）。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html及css总结</title>
      <link href="2021/04/27/html%E5%8F%8Acss%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/27/html%E5%8F%8Acss%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="html及css总结"><a href="#html及css总结" class="headerlink" title="html及css总结"></a>html及css总结</h1><h2 id="常见浏览器及内核"><a href="#常见浏览器及内核" class="headerlink" title="常见浏览器及内核"></a>常见浏览器及内核</h2><blockquote><p>浏览器：IE、谷歌、火狐、苹果、欧朋</p><p>内核：Trident、Blink、Gecko、Webkit、Blink</p></blockquote><h2 id="b和strong（i和em）标签的区别"><a href="#b和strong（i和em）标签的区别" class="headerlink" title="b和strong（i和em）标签的区别"></a>b和strong（i和em）标签的区别</h2><blockquote><p>b标签为一个实体标签，被包围的字符设为粗体</p><p>strong标签更加有语义化（推荐使用）</p><p>i标签为倾斜</p><p>em标签更有强调意义的倾斜</p></blockquote><h2 id="引入css的方式有几种"><a href="#引入css的方式有几种" class="headerlink" title="引入css的方式有几种"></a>引入css的方式有几种</h2><blockquote><p>（1）内嵌式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过&lt;style&gt;&lt;&#x2F;style&gt;来书写CSS代码。</span><br><span class="line">只能应用于当前网页，不能被其它网页共享。</span><br><span class="line">注意：&lt;style&gt;标记可以放在网页的任何地方，但一般放在&lt;head&gt;。</span><br></pre></td></tr></table></figure><blockquote><p>（2）外联式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过&lt;link&gt;标记来引入外部的CSS文件(.css)。</span><br><span class="line">可以被其它网页共享。</span><br><span class="line">格式：&lt;link href&#x3D;&quot;CSS的URL&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;</span><br><span class="line">注意：&lt;link&gt;标记只能放在&lt;head&gt;中</span><br></pre></td></tr></table></figure><blockquote><p>（3）行内样式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过style的属性来书写CSS代码。</span><br><span class="line">举例：&lt;p style&#x3D;&quot;font-size:24px;&quot;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h2 id="单行文本水平垂直居中如何实现"><a href="#单行文本水平垂直居中如何实现" class="headerlink" title="单行文本水平垂直居中如何实现"></a>单行文本水平垂直居中如何实现</h2><blockquote><p>1、水平居中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align:center;控制单行文字水平居中</span><br></pre></td></tr></table></figure><blockquote><p>2、垂直居中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置行高，line-height:与元素高度相等的值</span><br></pre></td></tr></table></figure><h2 id="选择器优先级如何计算"><a href="#选择器优先级如何计算" class="headerlink" title="选择器优先级如何计算"></a>选择器优先级如何计算</h2><ul><li><p>选择器优先级与权值相关</p></li><li><p>基础选择器的权值：通配符选择器（0）、标签选择器（1）、class选择器（10）、id选择器（100）</p></li><li><p>复合选择器的权值是所有的单一选择器权值的累加</p></li><li><p>权值越大，优先级越高；权值相同，后写的会覆盖先写的</p></li><li><p>继承样式没有权值，权值比0小，子元素设置样式会覆盖继承样式</p></li><li><p>行间样式权值为1000，优于id选择器</p></li><li><p>!important优于行间样式</p></li></ul><h2 id="那些css属性可以继承"><a href="#那些css属性可以继承" class="headerlink" title="那些css属性可以继承"></a>那些css属性可以继承</h2><blockquote><p>1、字体系列属性</p></blockquote><p>　　font-family：字体系列</p><p>　　font-weight：字体的粗细</p><p>　　font-size：字体的大小</p><p>　　font-style：字体的风格</p><p>　　line-height：行高</p><blockquote><p>2、文本系列属性</p></blockquote><p>　　text-indent：文本缩进</p><p>　　text-align：文本水平对齐</p><p>　　color：文本颜色</p><blockquote><p>3、 list-style属性</p></blockquote><h2 id="margin-存在问题"><a href="#margin-存在问题" class="headerlink" title="margin 存在问题"></a>margin 存在问题</h2><blockquote><p>重叠问题</p></blockquote><p>问题：两格兄弟元素同时设置margin-top和margin-bottom，会重叠，取最大值。</p><p>解决方案;</p><ul><li>避免同时使用，只需要一方使用</li><li>给其中一个盒子套一个大盒子包起来，给大盒子设置overflow:hidden;形成私有区域</li></ul><blockquote><p>塌陷问题</p></blockquote><p>问题：父元素的第一个子元素设置margin-top会传递给父元素</p><p>解决方案：</p><ul><li>避免使用margin-top</li><li>给父元素设置<ul><li>podding-top:1px</li><li>border-top:1px solid red;</li><li>overflow:hidden;私有区域</li></ul></li></ul><h2 id="浮动产生的问题？清除浮动的方案？"><a href="#浮动产生的问题？清除浮动的方案？" class="headerlink" title="浮动产生的问题？清除浮动的方案？"></a>浮动产生的问题？清除浮动的方案？</h2><blockquote><p>浮动元素引起的问题：</p></blockquote><p>浮动元素脱离文档流之后在文档流中不占位，父元素的高度无法被撑开，影响与父元素同级的元素</p><blockquote><p>清楚浮动的方法：</p></blockquote><p>（1）给父级元素加高度（不推荐使用，它只适合高度固定的布局，一般父盒子都是为由内容撑起来）</p><p>（2）在浮动元素的结尾处添加空div标签clear:both。具体做法：添加一个div标签并定义一个clear的类名，给clear类名添加样式clear:both，将该div标签放到父元素内容结束前的位置（缺点：会多加CSS和HTML标签）。</p><p>（3）给父级元素定义 overflow:hidden（推荐使用，缺点：不能和position配合使用，因为超出的尺寸的会被隐藏）</p><p>（4）给父级div定义伪类：after和zoom（推荐使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">清除浮动代码*&#x2F; .clearfix:after&#123;content:&quot;&quot;;display:block;clear:both;visibility:hidden;height:0&#125; .clearfix&#123;zoom:1&#125;</span><br></pre></td></tr></table></figure><p>然后父级元素添加clearfix类名即可</p><p>（5）给父级元素添加浮动（缺点：会产生新的浮动问题）</p><h2 id="BFC规则特性，及解决的问题？"><a href="#BFC规则特性，及解决的问题？" class="headerlink" title="BFC规则特性，及解决的问题？"></a>BFC规则特性，及解决的问题？</h2><blockquote><p>BFC规则</p></blockquote><ul><li><p>我的理解是：只有块级元素参与，BFC是指块级元素在页面中如何排列，如何渲染，并且与内部元素无关-</p></li><li><p>内部的标签会在垂直方向上一个接一个的放置</p><p>垂直方向上的距离由margin决定，属于同一个BFC的两个相邻标签的margin会发生重叠</p><p>每个标签的左外边距与包含块的左边界相接触（从左向右），即使浮动标签也是如此。</p><p>BFC的区域不会与float的标签区域重叠</p><p>计算BFC的高度时，浮动子标签也参与计算</p><p>BFC就是页面上的一个隔离的独立容器，容器里面的子标签不会影响到外面标签，反之亦然</p></li></ul><blockquote><p>BFC解决的问题</p></blockquote><h4 id="解决外边距折叠"><a href="#解决外边距折叠" class="headerlink" title="解决外边距折叠"></a>解决外边距折叠</h4><p>特性的第②条：垂直方向上的距离由margin决定。在常规文档流中，两个兄弟盒子之间的垂直距离是由他们的外边距所决定的，但不是他们的两个外边距之和，而是以较大的为准。特性的第⑥条：bfc就是页面上的一个独立容器，容器里面的子标签不会影响外面标签，同样外面的标签不会影响到BFC内的标签。所以可以让其中的一个标签处于一个BFC中</p><h4 id="自适应两栏或三栏布局"><a href="#自适应两栏或三栏布局" class="headerlink" title="自适应两栏或三栏布局"></a>自适应两栏或三栏布局</h4><p>左边固定宽度，右边不设宽，因此右边的宽度自适应，随浏览器窗口大小的变化而变化。</p><p>左右两边固定宽度，中间不设宽，因此中间的宽度自适应，随浏览器的大小变化而变化。</p><p>浮动的标签会覆盖正常标签根据第④条规则，BFC的区域不会与float的标签区域重叠，</p><p>所以我们只需要创建一个BFC，它就会自动缩小，以不被浮动的标签遮盖，就能够实现右侧栏自适应。</p><h4 id="防止字体环绕"><a href="#防止字体环绕" class="headerlink" title="防止字体环绕"></a>防止字体环绕</h4><p>浮动的盒子会遮盖下面的盒子，但是下面盒子里的文字是不会被遮盖的，文字反而还会环绕浮动的盒子。</p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>利用overflow:hidden清除浮动，因为浮动的盒子无法撑出处于标准文档流的父盒子的height。根据特性第⑤条。计算BFC的高度时，浮动子标签也参与计算。</p><h2 id="图片间隙问题，如何解决"><a href="#图片间隙问题，如何解决" class="headerlink" title="图片间隙问题，如何解决"></a>图片间隙问题，如何解决</h2><p>方法 1：将图片显示为块：解决下方间隙</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line">&#125;          </span><br></pre></td></tr></table></figure><p>方法 2：改变图片的 vertical-align :解决下方间隙</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">vertical-align</span>:middle; </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>除了 middle值，还可以设置为 top| bottom 等</p><p>方法 3：设置图片父级标签的 font-size:0;line-height:0; 水平间隙，图片下方间隙都能解决</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.imgwrap</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h2 id="圣杯布局、双飞翼布局的实现原理"><a href="#圣杯布局、双飞翼布局的实现原理" class="headerlink" title="圣杯布局、双飞翼布局的实现原理"></a>圣杯布局、双飞翼布局的实现原理</h2><ul><li>圣杯布局<ul><li>HTML结构中，先主体内容后侧边</li><li>两侧宽度固定，中间宽度设置100%</li><li>两侧盒子和中间盒分别加浮动</li><li>将左侧盒子拉到最左边，将右侧盒子拉到最右边</li><li>通过左、中、右盒子的父级盒将中间内容露出来</li><li>分别还原左侧盒子和右侧盒子</li></ul></li><li>双飞翼布局<ul><li>HTML结构中，先主体结构后侧边</li><li>两侧宽度固定，中间宽度设置100%</li><li>两侧盒子和中间盒分别加浮动</li><li>将左侧盒子拉到最左边，将右侧盒子拉到最右边</li><li>在主体结构盒的子盒上设置margin值，将中间内容露出来</li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/quruidong/blogFigureBed/img/20210427162150.png"></p><h2 id="精灵图的原理及优缺点？"><a href="#精灵图的原理及优缺点？" class="headerlink" title="精灵图的原理及优缺点？"></a>精灵图的原理及优缺点？</h2><p>英文叫法 css sprites，通常被解释为“CSS 图像拼合”或“CSS 贴图定位”；其实就</p><p>是把网页中一些背景图片整合到一张图片文件中，再利用 CSS “background-image”，</p><p>“background- repeat”，“background-position”的组合进行背景定位，background-position 用数字能精确的定位出背景图片的位置。适用于一般小图标，不适合大背景大布局背景</p><blockquote><p>优点：</p></blockquote><p>（1）减少网页的 http 请求，从而大大的提高页面的性能</p><p>（2）图片命名上的困扰</p><p>（3）更换风格方便</p><blockquote><p>缺点：</p></blockquote><p>（1）必须要限定容器大小符合背景图元素位置，需要计算</p><h2 id="html5的新特性"><a href="#html5的新特性" class="headerlink" title="html5的新特性"></a>html5的新特性</h2><ul><li><p>新增语义化的标签</p></li><li><p>新增表单元素和表单属性</p></li><li><p>新增网页上绘制图形的canvas元素</p></li><li><p>新增多媒体相关的video和audio</p></li><li><p>对本地离线存储的更好支持</p></li></ul><h2 id="处理HTML5新标签的浏览器兼容问题"><a href="#处理HTML5新标签的浏览器兼容问题" class="headerlink" title="处理HTML5新标签的浏览器兼容问题"></a>处理HTML5新标签的浏览器兼容问题</h2><p>HTML5新标签对IE低版本浏览器的影响及兼容情况处理方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方案一：使用javascript新增元素的方法解决</span><br><span class="line">document.createElement(“header”);</span><br><span class="line">document.createElement(“footer”);</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>由于创建出来的元素是内联元素，所以需要转换成块级，宽度和高度才能生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header,footer&#123; display:block;&#125;</span><br></pre></td></tr></table></figure><p>方案二：使用封装好的插件html5shiv.js解决兼容性问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;  src&#x3D;&quot;.&#x2F;html5shiv.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><p>上面这段代码仅会在IE浏览器下运行。</p><h2 id="响应式设计？响应式设计的基本原理？响应式优缺点？"><a href="#响应式设计？响应式设计的基本原理？响应式优缺点？" class="headerlink" title="响应式设计？响应式设计的基本原理？响应式优缺点？"></a>响应式设计？响应式设计的基本原理？响应式优缺点？</h2><p>页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整。</p><p>响应式布局可以根据屏幕的大小自动的调整页面的展现方式，以及布局。响应式布局是根据设备屏幕宽度不同适当调整标签显示布局，在每种设备屏幕宽度的设备下呈现的界面是不同的。</p><blockquote><p>响应式网站的优点：</p></blockquote><ul><li><p>减少工作量 网站、设计、代码、内容都 只需要一份，多出来的工作量只是JS脚本、CSS样式做一些改变              </p></li><li><p>节省时间</p></li><li><p>每个设备都能得到正确的设计</p></li></ul><blockquote><p>响应式网站的缺点：</p></blockquote><ul><li><p>会加载更多的样式和脚本资源</p></li><li><p>设计比较难精确定位和控制</p></li><li><p>老版本浏览器兼容不好</p></li></ul><h2 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h2><p>盒模型又称框模型（Box Model）,包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素。</p><p>元素框的总宽度 = 元素（element）的width + padding的左边距和右边距的值 + margin的左边距和右边距的值 + border的左右宽度；</p><p>元素框的总高度 = 元素（element）的height + padding的上下边距的值 + margin的上下边距的值 ＋ border的上下宽度。</p><blockquote><p>简单来说</p><p>​    就是每一个标签所占的位置就是盒模型</p><p>盒模型的计算：</p><p>​    宽高+matgin+padding+border</p></blockquote><h2 id="使用定位实现盒子水平垂直居中的代码"><a href="#使用定位实现盒子水平垂直居中的代码" class="headerlink" title="使用定位实现盒子水平垂直居中的代码"></a>使用定位实现盒子水平垂直居中的代码</h2><p>一、定位+margin负值，盒子有宽高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.father&#123; position:relative;&#125;</span><br><span class="line">.son&#123;position:absolute;left:50%;margin-left:-小盒子宽度的一半，top：50%；margin-top：-小盒子高度的一半&#125;</span><br></pre></td></tr></table></figure><p>二、定位+margin：auto，盒子有宽高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.father&#123; position:relative;&#125;</span><br><span class="line">.son&#123;position:absolute;left：0；top：0；right：0；bottom：0；margin：auto&#125;</span><br></pre></td></tr></table></figure><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>LESS是一种动态语言，属于CSS预处理语言的一种,它扩展了 CSS 语言，使 CSS 更易维护和扩展,可以更便捷的进行 Web 开发，使css的编写有编程思想。</p><p>Less 包含一套自定义的语法，用户根据这些语法定义自己的样式规则，最终会通过解析器，编译生成对应的 CSS 文件,只有在被编译成css后才能够被浏览器识别使用。</p><blockquote><p>好处：</p></blockquote><ul><li><p>结构清晰，便于扩展，易维护。</p></li><li><p>可以方便地屏蔽浏览器私有语法差异。</p></li><li><p>可以轻松实现多重继承。</p></li><li><p>完全兼容 CSS 代码，可以方便地应用到老项目中。</p></li></ul><h2 id="支持内联元素宽高"><a href="#支持内联元素宽高" class="headerlink" title="支持内联元素宽高"></a>支持内联元素宽高</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">display:block\inline-block</span><br><span class="line">float:left\right</span><br></pre></td></tr></table></figure><h2 id="css三大特性"><a href="#css三大特性" class="headerlink" title="css三大特性"></a>css三大特性</h2><ul><li>层叠性：通过相同的选择器选中同一个标签，给该标签设置同一个样式，其中一个会覆盖掉另一个</li><li>继承性：给父元素设置样式后，子元素能够应用上父元素的样式 ：以font-（font-size、font-family、font-weight、font-style）   line-（line-height)  text-(text-align、text-decoration、text-indent、text-shadow)  开头的样式 以及 color   是可以继承的</li><li>优先级：<ul><li>优先级计算方式：多个基本选择器的权重相加</li><li>!important 1000  &gt;  id 100  &gt; class 10  &gt;   标签 1   &gt;   * 0</li><li>权重一样，选中的标签一致，遵循就近原则</li><li>权重不同，选中的标签一致，优先使用权重大的样式</li><li>选中不同的标签，遵循继承来的样式优先级没有自己本身优先级高</li><li>！important  优先级高于行间样式，但还是得遵循继承来的样式优先级没有自己本身优先级高</li></ul></li></ul><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC：英文：Block Formatting Context，全称”块级格式化上下文”，BFC：只有块级元素参与的，BFC是指块级元素在页面中如何排列，如何渲染，并且与内部元素无关</p><h3 id="BFC特性"><a href="#BFC特性" class="headerlink" title="BFC特性"></a>BFC特性</h3><ol><li>内部标签在垂直方向上一个接一个的放置</li><li>迟滞方向上的距离是由margin决定，属于同一个BFC的两个相邻标签的margin会发生重叠</li><li>每个标签的左外边距会与包含块的左边距相接触（从左到右），浮动元素也是如此</li><li>BFC区域不会与浮动区域发生重叠</li><li>计算BFC区域的高度时，浮动子元素也参与计算</li><li>BFC就是页面中的一个隔离的独立容器，容器里面的字标签不会影响外面的标签，反之亦然。</li></ol><h3 id="BFC的生成"><a href="#BFC的生成" class="headerlink" title="BFC的生成"></a>BFC的生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根目录</span><br><span class="line">display:inline-block;</span><br><span class="line">float:left|right;</span><br><span class="line">position:absolute|fixed;</span><br><span class="line">overfiow:hidden|auto|scroll;</span><br></pre></td></tr></table></figure><h3 id="BFC解决问题"><a href="#BFC解决问题" class="headerlink" title="BFC解决问题"></a>BFC解决问题</h3><blockquote><p>兄弟元素的外边距塌陷问题<br>产生原因：BFC特性（2）<br>解决方法：让他们处于不同的BFC区域，给其中一个兄弟元素套一个盒子，给父元素设置overflow:hidden</p></blockquote><blockquote><p>两|三栏自适应<br>产生原因：浮动会脱离文档流，但是不脱离文本流，所以左侧盒子浮动之后，右侧盒子中的文字会环绕在左侧盒子的周围<br>解决问题：根据特性（4），可以让右侧盒子处于一个新的BFC区域就不会与浮动区域发生重叠</p></blockquote><blockquote><p>放止文字环绕<br>文字环绕产生的原因：图片浮动会脱离文档流，但是不脱离文本流，左侧盒子中的文字会环绕在图片的周围<br>解决问题：根据特性（4），可以让左侧盒子处于一个新的BFC区域就不会与浮动区域发生重叠</p></blockquote><blockquote><p>清浮动：给父元素添加<code>overflow:hidden</code>清浮动时，根据特性（5），让父元素在BFC区域中，那么计算高度时浮动子元素也会参与计算</p></blockquote><h3 id="css预处理-less"><a href="#css预处理-less" class="headerlink" title="css预处理 less"></a>css预处理 less</h3><ol><li>less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件,只有在被编译后才能够被浏览器识别使用。</li><li>好处<ul><li>结构清晰，便于扩展</li><li>可以方便地平布浏览器私有语法差异</li><li>可以轻松实现多重继承</li><li>完全兼容css代码，可以方便的用到老项目中</li></ul></li><li>编译工具：<ul><li>Visual Studio Code 插件 easyless</li></ul></li><li>less语法<ul><li>注释：<ul><li>多行注释   /* comment */ ，会保留到编译后的文件。</li><li>单行注释 // comment，只保留在less源文件中，编译后被省略。</li></ul></li><li>@import “导入文件的地址”;（.css 后缀名不能省略，引入 .less 文件可以省略扩展名）</li><li>变量<ul><li>定义：@变量名:值;</li><li>使用：<ul><li>变量以@开头,变量名与变量值之间用【冒号】分隔   width: @变量名;</li><li> 如果变量需要镶嵌在字符串之中，就必须需要写在@{}之中   border-@{dir}:1px solid red;</li></ul></li></ul></li><li>嵌套： 选择器嵌套，在嵌套的代码块内，使用&amp;引用父元素</li><li>继承： &amp;:extend(.box1);</li><li>运算：任何数字、颜色或者变量都可以参与运算；在运算中以()进行优先级计算</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP和HTTPS的理解</title>
      <link href="2021/04/21/HTTP%E5%92%8CHTTPS%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>2021/04/21/HTTP%E5%92%8CHTTPS%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>欢迎来到<a href="http://qrdd.gitee.io/blog/">搬码鸭の博客</a>呀！</strong><br><strong>博客朋友们如果提问没有的到回复，可以去<a href="https://blog.csdn.net/m0_56737433?spm=1000.2115.3001.5343">CSDN</a>相应的文章下评论，谢谢！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo报错Spawn failed解决方法</title>
      <link href="2021/04/13/hexo%E6%8A%A5%E9%94%99Spawn%20failed%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2021/04/13/hexo%E6%8A%A5%E9%94%99Spawn%20failed%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="再部署过程中-有的时候会部署不上，具体原因是什么还不清楚，问过群友后有以下解决方法，我也发现了另为一种解决方法，分享给大家。"><a href="#再部署过程中-有的时候会部署不上，具体原因是什么还不清楚，问过群友后有以下解决方法，我也发现了另为一种解决方法，分享给大家。" class="headerlink" title="再部署过程中 有的时候会部署不上，具体原因是什么还不清楚，问过群友后有以下解决方法，我也发现了另为一种解决方法，分享给大家。"></a>再部署过程中 有的时候会部署不上，具体原因是什么还不清楚，问过群友后有以下解决方法，我也发现了另为一种解决方法，分享给大家。</h2><h3 id="来自大佬分享-传送门"><a href="#来自大佬分享-传送门" class="headerlink" title="来自大佬分享 传送门"></a>来自大佬分享 <a href="https://blog.zhheo.com/p/128998ac.html">传送门</a></h3><p>报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\banmaya\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:379:20)</span><br><span class="line">      at ChildProcess.cp.emit (E:\banmaya\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal&#x2F;child_process:285:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#39;s wrong. Maybe you can find the solution here: %s https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决方法一（自己常用）"><a href="#解决方法一（自己常用）" class="headerlink" title="解决方法一（自己常用）"></a>解决方法一（自己常用）</h3><p>不过在使用过程中发现，每次都需要进行这样的操作，并且可能第一次不会成功，需要几次操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="解决方法二（用过一次，但是第二次就不行，不知道为什么）"><a href="#解决方法二（用过一次，但是第二次就不行，不知道为什么）" class="headerlink" title="解决方法二（用过一次，但是第二次就不行，不知道为什么）"></a>解决方法二（用过一次，但是第二次就不行，不知道为什么）</h3><p><a href="https://1187100546.github.io/2019/11/24/spawn-failed/">huahua</a>提供的方法，删除博客根目录文件夹中的<code>.deploy_git</code>文件夹，然后在博客根目录下输入<code>git config --global core.autocrlf false</code></p><h3 id="解决方法三（未验证）"><a href="#解决方法三（未验证）" class="headerlink" title="解决方法三（未验证）"></a>解决方法三（未验证）</h3><p><a href="http://ciraos.top/">小青</a>提供的方法：找到<code>.deploy_git</code>文件夹中的<code>index.lock</code>文件，删除就好了。</p><h3 id="解决方式四（不推荐）"><a href="#解决方式四（不推荐）" class="headerlink" title="解决方式四（不推荐）"></a>解决方式四（不推荐）</h3><p>cd进<code>.deploy_git</code>文件夹，然后使用<code>git push -f</code>强制推送</p><h3 id="解决方法五"><a href="#解决方法五" class="headerlink" title="解决方法五"></a>解决方法五</h3><p><a href="https://perry96.com/archives/882898e3.html">Perry</a>提供的方法：打开<code>.deploy_git\.git\logs</code>路径下的<code>HEAD</code>查看最近一次正确的那次的<code>commitId</code>然后用<code>git reset --hard commitId</code>回滚</p><p>每个方法最后进行hexo三连操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
